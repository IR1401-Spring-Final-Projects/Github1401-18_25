import numpy as npfrom sklearn.metrics.pairwise import cosine_similarityclass Rocchio:    def __init__(self, alpha = 1, beta = 0.75, gamma = 0.15, iters = 2, rel_count = 7, nrel_count = 3):        self.alpha = alpha        self.beta = beta        self.gamma = gamma        self.iters = iters        self.rel_count = rel_count        self.nrel_count = nrel_count    def expand_query(self, sorted_docs, query, urls = False):        '''        sorted_docs are the result of retrival        query is a vectorized        output is a numpy array         '''                sorted_docs = np.array(sorted_docs)        query = np.array(query)        cos_sim = cosine_similarity(np.array([query]), sorted_docs)        rankings = np.flip(cos_sim.argsort(axis=1), axis=1)        for _ in range(self.iters):            rel_vecs = sorted_docs[rankings[:, :self.rel_count]].mean(axis=1)            nrel_vecs = sorted_docs[rankings[:, -self.nrel_count:]].mean(axis=1)            query = self.alpha * query + self.beta * rel_vecs - self.gamma * nrel_vecs            cos_sim = cosine_similarity(query, sorted_docs)            rankings = np.flip(cos_sim.argsort(axis=1), axis=1)        if type(urls) ==bool:            return sorted_docs[rankings[:, :]], cos_sim[rankings[:,:]]        else:            urls = np.array(urls)            return sorted_docs[rankings[:, :]], urls[rankings[:,:]], cos_sim[0][rankings[:,:]]            